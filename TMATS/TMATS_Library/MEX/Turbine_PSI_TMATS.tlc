%% File : Turbine_PSI_TMATS.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for Turbine_PSI_TMATS
%%
%implements Turbine_PSI_TMATS "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
    %%
    %% The Target Language must be C
    %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %<LibAddToCommonIncludes("types_TMATS.h")>

    %<SLibAddToStaticSources("Turbine_PSI_TMATS_body.c")>

    %openfile forwardDecls
      extern void Turbine_PSI_TMATS_body(double *y, const double *u, const double *CoolFlow, const Turbine_PSIStruct* prm);
      Turbine_PSIStruct turbine_PSIStruct;
    %closefile forwardDecls

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Definitions", forwardDecls)>

%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
    %%
    %<LibBlockSetIsExpressionCompliant(block)>
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
    %%
    turbine_PSIStruct.NcDes               = %<LibBlockParameter(NcDes,"","",0)>;
    turbine_PSIStruct.PRmapDes            = %<LibBlockParameter(PRmapDes,"","",0)>;
    turbine_PSIStruct.EffDes              = %<LibBlockParameter(EffDes,"","",0)>;
    turbine_PSIStruct.NDes                = %<LibBlockParameter(NDes,"","",0)>;
    turbine_PSIStruct.IDes                = %<LibBlockParameter(IDesign,"","",0)>;
    turbine_PSIStruct.s_T_hi              = %<LibBlockParameter(s_T_hi,"","",0)>;
    turbine_PSIStruct.gamma_T             = %<LibBlockParameter(gamma_T,"","",0)>;
    turbine_PSIStruct.Rt_T                = %<LibBlockParameter(Rt_T,"","",0)>;
    turbine_PSIStruct.BldPosLeng          = %<LibBlockParameter(BldPosLeng,"","",0)>;
    turbine_PSIStruct.CoolFlwEn           = %<LibBlockParameter(CoolFlwEn,"","",0)>;
    turbine_PSIStruct.Y_T_NcpsiVec        = (double*)(%<LibBlockParameterBaseAddr(Y_T_NcpsiVec)>);
    turbine_PSIStruct.X_T_PRpsiVec        = (double*)(%<LibBlockParameterBaseAddr(X_T_PRpsiVec)>);
    turbine_PSIStruct.Y_T_NcwowVec        = (double*)(%<LibBlockParameterBaseAddr(Y_T_NcwowVec)>);
    turbine_PSIStruct.X_T_PRwowVec        = (double*)(%<LibBlockParameterBaseAddr(X_T_PRwowVec)>);
    turbine_PSIStruct.T_T_Map_WoWArray    = (double*)(%<LibBlockParameterBaseAddr(T_T_Map_WoWArray)>);
    turbine_PSIStruct.T_T_Map_psiArray    = (double*)(%<LibBlockParameterBaseAddr(T_T_Map_psiArray)>);
    turbine_PSIStruct.T_BldPos            = (double*)(%<LibBlockParameterBaseAddr(T_BldPos)>);
    turbine_PSIStruct.A                   = %<LibBlockParameterSize(Y_T_NcpsiVec)[1]>;
    turbine_PSIStruct.B                   = %<LibBlockParameterSize(X_T_PRpsiVec)[1]>;
    turbine_PSIStruct.C                   = %<LibBlockParameterSize(Y_T_NcwowVec)[1]>;
    turbine_PSIStruct.D                   = %<LibBlockParameterSize(X_T_PRwowVec)[1]>;

    turbine_PSIStruct.IWork               = &%<LibBlockIWork(Errors,"","",0)>;
    turbine_PSIStruct.BlkNm               = "%<LibGetFormattedBlockPath(block)>";
    
    %assign y_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign y_dataType = LibBlockOutputSignalDataTypeName(0,"")

    %assign u_ptr = LibBlockInputSignalAddr(0, "", "", 0)
    %assign u_dataType = LibBlockInputSignalDataTypeName(0,"")
    %assign CoolFlow_ptr = LibBlockInputSignalAddr(1, "", "", 0)
    %assign CoolFlow_dataType = LibBlockInputSignalDataTypeName(1,"")

    %%
    Turbine_PSI_TMATS_body((%<y_dataType>*)%<y_ptr>,\ 
                   (%<u_dataType>*)%<u_ptr>,\ 
                   (%<CoolFlow_dataType>*)%<CoolFlow_ptr>,\ 
                    &turbine_PSIStruct);
    %%
%endfunction

%% [EOF]
