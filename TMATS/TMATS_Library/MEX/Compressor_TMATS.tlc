%% File : Compressor_TMATS.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for Compressor_TMATS
%%
%implements Compressor_TMATS "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
    %%
    %% The Target Language must be C
    %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %<LibAddToCommonIncludes("types_TMATS.h")>

    %<SLibAddToStaticSources("Compressor_TMATS_body.c")>

    %openfile forwardDecls
      extern void Compressor_TMATS_body(double* y, double* y1, double* y2, const double* u, const double* Wcust, const double* FracWbld, const CompressorStruct* prm);
      CompressorStruct compressorStruct;
    %closefile forwardDecls

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Definitions", forwardDecls)>

%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
    %%
    %<LibBlockSetIsExpressionCompliant(block)>
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
    %%
    compressorStruct.NcDes               = %<LibBlockParameter(NcDes,"","",0)>;
    compressorStruct.PRDes               = %<LibBlockParameter(PRDes,"","",0)>;
    compressorStruct.EffDes              = %<LibBlockParameter(EffDes,"","",0)>;
    compressorStruct.RlineDes            = %<LibBlockParameter(RlineDes,"","",0)>;
    compressorStruct.IDes                = %<LibBlockParameter(IDesign,"","",0)>;
    compressorStruct.CustBldEn           = %<LibBlockParameter(CustBldEn,"","",0)>;
    compressorStruct.FBldEn              = %<LibBlockParameter(FBldEn,"","",0)>;
    compressorStruct.CustBldNm           = %<LibBlockParameter(CustBldNm,"","",0)>;
    compressorStruct.FracBldNm           = %<LibBlockParameter(FracBldNm,"","",0)>;
    compressorStruct.Y_C_Map_NcVec       = (double*)(%<LibBlockParameterBaseAddr(Y_C_Map_NcVec)>);
    compressorStruct.X_C_RlineVec        = (double*)(%<LibBlockParameterBaseAddr(X_C_RlineVec)>);
    compressorStruct.Z_C_AlphaVec        = (double*)(%<LibBlockParameterBaseAddr(Z_C_AlphaVec)>);
    compressorStruct.T_C_Map_WcArray     = (double*)(%<LibBlockParameterBaseAddr(T_C_Map_WcArray)>);
    compressorStruct.T_C_Map_PRArray     = (double*)(%<LibBlockParameterBaseAddr(T_C_Map_PRArray)>);
    compressorStruct.T_C_Map_EffArray    = (double*)(%<LibBlockParameterBaseAddr(T_C_Map_EffArray)>);
    compressorStruct.FracCusBldht        = (double*)(%<LibBlockParameterBaseAddr(FracCusBldht)>);
    compressorStruct.FracCusBldPt        = (double*)(%<LibBlockParameterBaseAddr(FracCusBldPt)>);
    compressorStruct.FracBldht           = (double*)(%<LibBlockParameterBaseAddr(FracBldht)>);
    compressorStruct.FracBldPt           = (double*)(%<LibBlockParameterBaseAddr(FracBldPt)>);
    compressorStruct.X_C_Map_WcSurgeVec  = (double*)(%<LibBlockParameterBaseAddr(X_C_Map_WcSurgeVec)>);
    compressorStruct.T_C_Map_PRSurgeVec  = (double*)(%<LibBlockParameterBaseAddr(T_C_Map_PRSurgeVec)>);
    compressorStruct.A                   = %<LibBlockParameterSize(Y_C_Map_NcVec)[1]>;
    compressorStruct.B                   = %<LibBlockParameterSize(X_C_RlineVec)[1]>;
    compressorStruct.C                   = %<LibBlockParameterSize(Z_C_AlphaVec)[1]>;
    compressorStruct.D                   = %<LibBlockParameterSize(X_C_Map_WcSurgeVec)[1]>;
    compressorStruct.WcMapCol            = %<LibBlockParameter(WcMapCol,"","",0)>;
    compressorStruct.PRMapCol            = %<LibBlockParameter(PRMapCol,"","",0)>;
    compressorStruct.EffMapCol           = %<LibBlockParameter(EffMapCol,"","",0)>;
    compressorStruct.WcMapRw             = %<LibBlockParameter(WcMapRw,"","",0)>;
    compressorStruct.PRMapRw             = %<LibBlockParameter(PRMapRw,"","",0)>;
    compressorStruct.EffMapRw            = %<LibBlockParameter(EffMapRw,"","",0)>;
    compressorStruct.WcMapLay            = %<LibBlockParameter(WcMapLay,"","",0)>;
    compressorStruct.PRMapLay            = %<LibBlockParameter(PRMapLay,"","",0)>;
    compressorStruct.EffMapLay           = %<LibBlockParameter(EffMapLay,"","",0)>;

    compressorStruct.IWork               = &%<LibBlockIWork(Errors,"","",0)>;
    compressorStruct.BlkNm               = "%<LibGetFormattedBlockPath(block)>";

    %assign y_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign y_dataType = LibBlockOutputSignalDataTypeName(0,"")
    %assign y1_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
    %assign y1_dataType = LibBlockOutputSignalDataTypeName(1,"")
    %assign y2_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
    %assign y2_dataType = LibBlockOutputSignalDataTypeName(2,"")

    %assign u_ptr = LibBlockInputSignalAddr(0, "", "", 0)
    %assign u_dataType = LibBlockInputSignalDataTypeName(0,"")
    %assign Wcust_ptr = LibBlockInputSignalAddr(1, "", "", 0)
    %assign Wcust_dataType = LibBlockInputSignalDataTypeName(1,"")
    %assign FracWbld_ptr = LibBlockInputSignalAddr(2, "", "", 0)
    %assign FracWbld_dataType = LibBlockInputSignalDataTypeName(2,"")

    %%
    Compressor_TMATS_body((%<y_dataType>*)%<y_ptr>,\ 
                    (%<y1_dataType>*)%<y1_ptr>,\ 
                    (%<y2_dataType>*)%<y2_ptr>,\ 
                    (%<u_dataType>*)%<u_ptr>,\ 
                    (%<Wcust_dataType>*)%<Wcust_ptr>,\ 
                    (%<FracWbld_dataType>*)%<FracWbld_ptr>,\ 
                     &compressorStruct);
    %%
%endfunction

%% [EOF]
