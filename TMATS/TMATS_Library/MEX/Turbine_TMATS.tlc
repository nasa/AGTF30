%% File : Turbine_TMATS.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for Turbine_TMATS
%%
%implements Turbine_TMATS "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
    %%
    %% The Target Language must be C
    %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %<LibAddToCommonIncludes("types_TMATS.h")>

    %<SLibAddToStaticSources("Turbine_TMATS_body.c")>

    %openfile forwardDecls
      extern void Turbine_TMATS_body(double* y, const double* u, const double* CoolFlow, const TurbineStruct* prm);
      TurbineStruct turbineStruct;
    %closefile forwardDecls

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Definitions", forwardDecls)>

%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
    %%
    %<LibBlockSetIsExpressionCompliant(block)>
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
    %%
    turbineStruct.NcDes               = %<LibBlockParameter(NcDes,"","",0)>;
    turbineStruct.PRmapDes            = %<LibBlockParameter(PRmapDes,"","",0)>;
    turbineStruct.EffDes              = %<LibBlockParameter(EffDes,"","",0)>;
    turbineStruct.NDes                = %<LibBlockParameter(NDes,"","",0)>;
    turbineStruct.IDes                = %<LibBlockParameter(IDesign,"","",0)>;
    turbineStruct.BldPosLeng          = %<LibBlockParameter(BldPosLeng,"","",0)>;
    turbineStruct.CoolFlwEn           = %<LibBlockParameter(CoolFlwEn,"","",0)>;
    turbineStruct.ConfigNPSS          = %<LibBlockParameter(ConfigNPSS,"","",0)>;
    turbineStruct.Y_T_NcVec           = (double*)(%<LibBlockParameterBaseAddr(Y_T_NcVec)>);
    turbineStruct.X_T_PRVec           = (double*)(%<LibBlockParameterBaseAddr(X_T_PRVec)>);
    turbineStruct.T_T_Map_WcArray     = (double*)(%<LibBlockParameterBaseAddr(T_T_Map_WcArray)>);
    turbineStruct.T_T_Map_EffArray    = (double*)(%<LibBlockParameterBaseAddr(T_T_Map_EffArray)>);
    turbineStruct.T_BldPos            = (double*)(%<LibBlockParameterBaseAddr(T_BldPos)>);
    turbineStruct.A                   = %<LibBlockParameterSize(Y_T_NcVec)[1]>;
    turbineStruct.B                   = %<LibBlockParameterSize(X_T_PRVec)[1]>;
    turbineStruct.WcMapCol            = %<LibBlockParameter(WcMapCol,"","",0)>;
    turbineStruct.EffMapCol           = %<LibBlockParameter(EffMapCol,"","",0)>;
    turbineStruct.WcMapRw             = %<LibBlockParameter(WcMapRw,"","",0)>;
    turbineStruct.EffMapRw            = %<LibBlockParameter(EffMapRw,"","",0)>;

    turbineStruct.IWork               = &%<LibBlockIWork(Errors,"","",0)>;
    turbineStruct.BlkNm               = "%<LibGetFormattedBlockPath(block)>";

    %assign y_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign y_dataType = LibBlockOutputSignalDataTypeName(0,"")

    %assign u_ptr = LibBlockInputSignalAddr(0, "", "", 0)
    %assign u_dataType = LibBlockInputSignalDataTypeName(0,"")
    %assign CoolFlow_ptr = LibBlockInputSignalAddr(1, "", "", 0)
    %assign CoolFlow_dataType = LibBlockInputSignalDataTypeName(1,"")

    %%
    Turbine_TMATS_body((%<y_dataType>*)%<y_ptr>,\ 
                       (%<u_dataType>*)%<u_ptr>,\ 
                       (%<CoolFlow_dataType>*)%<CoolFlow_ptr>,\ 
                        &turbineStruct);
    %%
%endfunction

%% [EOF]
