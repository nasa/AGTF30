%% File : Nozzle_TMATS.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for Nozzle_TMATS
%%
%implements Nozzle_TMATS "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
    %%
    %% The Target Language must be C
    %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %<LibAddToCommonIncludes("types_TMATS.h")>

    %<SLibAddToStaticSources("Nozzle_TMATS_body.c")>

    %openfile forwardDecls
      extern void Nozzle_TMATS_body(double* y, const double* u, const NozzleStruct* prm);
      NozzleStruct nozzleStruct;
    %closefile forwardDecls

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Definitions", forwardDecls)>

%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
    %%
    %<LibBlockSetIsExpressionCompliant(block)>
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
    %%
    nozzleStruct.SwitchType          = %<LibBlockParameter(SwitchType,"","",0)>;
    nozzleStruct.flowLoss            = %<LibBlockParameter(flowLoss,"","",0)>;
    nozzleStruct.IDes                = %<LibBlockParameter(iDesign,"","",0)>;
    nozzleStruct.WDes                = %<LibBlockParameter(WDes,"","",0)>;
    nozzleStruct.CfgEn               = %<LibBlockParameter(CfgEn,"","",0)>;
    nozzleStruct.Y_N_FARVec          = (double*)(%<LibBlockParameterBaseAddr(Y_N_FARVec)>);
    nozzleStruct.T_N_RtArray         = (double*)(%<LibBlockParameterBaseAddr(T_N_RtArray)>);
    nozzleStruct.X_N_TtVec           = (double*)(%<LibBlockParameterBaseAddr(X_N_TtVec)>);
    nozzleStruct.T_N_MAP_gammaArray  = (double*)(%<LibBlockParameterBaseAddr(T_N_MAP_gammaArray)>);
    nozzleStruct.X_N_PEQPaVec        = (double*)(%<LibBlockParameterBaseAddr(X_N_PEQPaVec)>);
    nozzleStruct.T_N_CdThArray       = (double*)(%<LibBlockParameterBaseAddr(T_N_CdThArray)>);
    nozzleStruct.T_N_CvArray         = (double*)(%<LibBlockParameterBaseAddr(T_N_CvArray)>);
    nozzleStruct.T_N_CfgArray        = (double*)(%<LibBlockParameterBaseAddr(T_N_CfgArray)>);
    nozzleStruct.T_N_TGArray         = (double*)(%<LibBlockParameterBaseAddr(T_N_TGArray)>);
    nozzleStruct.X_N_TtVecTG         = (double*)(%<LibBlockParameterBaseAddr(X_N_TtVecTG)>);
    nozzleStruct.A                   = %<LibBlockParameterSize(Y_N_FARVec)[1]>;
    nozzleStruct.B                   = %<LibBlockParameterSize(X_N_TtVec)[1]>;
    nozzleStruct.B1                  = %<LibBlockParameterSize(X_N_PEQPaVec)[1]>;
    nozzleStruct.C                   = %<LibBlockParameterSize(X_N_TtVecTG)[1]>;

    nozzleStruct.IWork               = &%<LibBlockIWork(Errors,"","",0)>;
    nozzleStruct.BlkNm               = "%<LibGetFormattedBlockPath(block)>";

    %assign y_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign y_dataType = LibBlockOutputSignalDataTypeName(0,"")

    %assign u_ptr = LibBlockInputSignalAddr(0, "", "", 0)
    %assign u_dataType = LibBlockInputSignalDataTypeName(0,"")

    %%
    Nozzle_TMATS_body((%<y_dataType>*)%<y_ptr>,\ 
                        (%<u_dataType>*)%<u_ptr>,\ 
                         &nozzleStruct);
    %%
%endfunction

%% [EOF]
